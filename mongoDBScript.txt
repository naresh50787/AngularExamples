db.books.insertMany([
	{ "_id" : 1, "title" : "Unlocking Android", "isbn" : "1933988673", "categories" : [ "Open Source", "Mobile" ] },
	{ "_id" : 2, "title" : "Android in Action, Second Edition", "isbn" : "1935182722", "categories" : [ "Java" ] },
	{ "_id" : 3, "title" : "Specification by Example", "isbn" : "1617290084", "categories" : [ "Software Engineering" ] },
	{ "_id" : 4, "title" : "Flex 3 in Action", "isbn" : "1933988746", "categories" : [ "Internet" ] },
	{ "_id" : 5, "title" : "Flex 4 in Action", "isbn" : "1935182420", "categories" : [ "Internet" ] },
	{ "_id" : 6, "title" : "Collective Intelligence in Action", "isbn" : "1933988312", "categories" : [ "Internet" ] },
	{ "_id" : 7, "title" : "Zend Framework in Action", "isbn" : "1933988320", "categories" : [ "Web Development" ] },
	{ "_id" : 8, "title" : "Flex on Java", "isbn" : "1933988797", "categories" : [ "Internet" ] },
	{ "_id" : 9, "title" : "Griffon in Action", "isbn" : "1935182234", "categories" : [ "Java" ] },
	{ "_id" : 10, "title" : "OSGi in Depth", "isbn" : "193518217X", "categories" : [ "Java" ] },
	{ "_id" : 11, "title" : "Flexible Rails", "isbn" : "1933988509", "categories" : [ "Web Development" ] },
	{ "_id" : 13, "title" : "Hello! Flex 4", "isbn" : "1933988762", "categories" : [ "Internet" ] },
	{ "_id" : 14, "title" : "Coffeehouse", "isbn" : "1884777384", "categories" : [ "Miscellaneous" ] },
	{ "_id" : 15, "title" : "Team Foundation Server 2008 in Action", "isbn" : "1933988592", "categories" : [ "Microsoft .NET" ] },
	{ "_id" : 16, "title" : "Brownfield Application Development in .NET", "isbn" : "1933988711", "categories" : [ "Microsoft" ] },
	{ "_id" : 17, "title" : "MongoDB in Action", "isbn" : "1935182870", "categories" : [ "Next Generation Databases" ] },
	{ "_id" : 18, "title" : "Distributed Application Development with PowerBuilder 6.0", "isbn" : "1884777686", "categories" : [ "PowerBuilder" ] },
	{ "_id" : 19, "title" : "Jaguar Development with PowerBuilder 7", "isbn" : "1884777864", "categories" : [ "PowerBuilder", "Client-Server" ] },
	{ "_id" : 20, "title" : "Taming Jaguar", "isbn" : "1884777686", "categories" : [ "PowerBuilder" ] },
	{ "_id" : 21, "title" : "3D User Interfaces with Java 3D", "isbn" : "1884777902", "categories" : [ "Java", "Computer Graphics" ] },
	{ "_id" : 22, "title" : "Hibernate in Action", "isbn" : "193239415X", "categories" : [ "Java" ] },
	{ "_id" : 23, "title" : "Hibernate in Action (Chinese Edition)", "categories" : [ "Java" ] },
	{ "_id" : 24, "title" : "Java Persistence with Hibernate", "isbn" : "1932394885", "categories" : [ "Java" ] },
	{ "_id" : 25, "title" : "JSTL in Action", "isbn" : "1930110529", "categories" : [ "Internet" ] },
	{ "_id" : 26, "title" : "iBATIS in Action", "isbn" : "1932394826", "categories" : [ "Web Development" ] },
	{ "_id" : 27, "title" : "Designing Hard Software", "isbn" : "133046192", "categories" : [ "Object-Oriented Programming", "S" ] },
	{ "_id" : 28, "title" : "Hibernate Search in Action", "isbn" : "1933988649", "categories" : [ "Java" ] },
	{ "_id" : 29, "title" : "jQuery in Action", "isbn" : "1933988355", "categories" : [ "Web Development" ] },
	{ "_id" : 30, "title" : "jQuery in Action, Second Edition", "isbn" : "1935182323", "categories" : [ "Java" ] }
]);

db.books.find()
db.books.find({_id: 10})
db.books.find({ categories: 'Java'}, { title: 1,isbn: 1})
db.books.find({ categories: 'Java'}, { title: 1,isbn: 1,_id: 0})


db.products.insertMany([
    { "_id" : 1, "name" : "xPhone", "price" : 799, "releaseDate": ISODate("2011-05-14"), "spec" : { "ram" : 4, "screen" : 6.5, "cpu" : 2.66 },"color":["white","black"],"storage":[64,128,256]},
    { "_id" : 2, "name" : "xTablet", "price" : 899, "releaseDate": ISODate("2011-09-01") , "spec" : { "ram" : 16, "screen" : 9.5, "cpu" : 3.66 },"color":["white","black","purple"],"storage":[128,256,512]},
    { "_id" : 3, "name" : "SmartTablet", "price" : 899, "releaseDate": ISODate("2015-01-14"), "spec" : { "ram" : 12, "screen" : 9.7, "cpu" : 3.66 },"color":["blue"],"storage":[16,64,128]},
    { "_id" : 4, "name" : "SmartPad", "price" : 699, "releaseDate": ISODate("2020-05-14"),"spec" : { "ram" : 8, "screen" : 9.7, "cpu" : 1.66 },"color":["white","orange","gold","gray"],"storage":[128,256,1024]},
    { "_id" : 5, "name" : "SmartPhone", "price" : 599,"releaseDate": ISODate("2022-09-14"), "spec" : { "ram" : 4, "screen" : 9.7, "cpu" : 1.66 },"color":["white","orange","gold","gray"],"storage":[128,256]}
 ])

Equal :
db.products.find({
    price: {
        $eq: 899
    }
}, {
    name: 1,
    price: 1
})
db.products.find({
    price: 899
}, {
    name: 1,
    price: 1
})
db.products.find({
    "spec.ram": {
        $eq: 4
    }
}, {
    name: 1,
    "spec.ram": 1
})

db.products.find({
    color: {
        $eq: "black"
    }
}, {
    name: 1,
    color: 1
})

Introduction to the MongoDB $gt operator

{ field: { $gt: value}}

db.products.find({
    price: {
        $gt: 699
    }
}, {
    name: 1,
    price: 1
})

db.products.find({
    "spec.ram": {
        $gt: 8
    }
}, {
    name: 1,
    "spec.ram": 1
});

db.products.find({
    storage: {
        $gt: 128
    }
}, {
    name: 1,
    storage: 1
})

db.products.find({
    "releaseDate": {
        $gt: new ISODate('2015-01-01')
    }
}, {
    name: 1,
    releaseDate: 1
});

1) Using $gte operator to select documents where a field is greater than or equal to a specified value

db.products.find({
    price: {
        $gte: 799
    }
}, {
    name: 1,
    price: 1
})

Using $lt operator to select documents where a field is less than a specified value
db.products.find({
    price: {
        $lt: 799
    }
}, {
    name: 1,
    price: 1
})
db.products.find({
    "spec.screen": {
        $lt: 7
    }
}, {
    name: 1,
    "spec.screen": 1
})

1) Using $lte operator to select documents where the value of a field is less than or equal to a specified value
db.products.find({
    price: {
        $lte: 799
    }
}, {
    name: 1,
    price: 1
})
db.products.find({
    "spec.screen": {
        $lte: 6.5
    }
}, {
    name: 1,
    "spec.screen": 1
})


Not Equal
The following example uses the $ne operator to select documents from the products collection where the price is not equal to 899:
db.products.find({
    price: {
        $ne: 899
    }
}, {
    name: 1,
    price: 1
})
db.products.find({
    "spec.screen": {
        $ne: 9.7
    }
}, {
    name: 1,
    "spec.screen": 1
})

IN 
The $in is a comparison query operator that allows you to select documents where the value of a field is equal to any value in an array.
db.products.find({
    price: {
        $in: [699, 799]
    }
}, {
    name: 1,
    price: 1
})

db.products.find({
    color: {
        $in: ["black", "white"]
    }
}, {
    name: 1,
    color: 1
})

MongoDB $nin operator examples

db.products.find({
    price: {
        $nin: [699, 799]
    }
}, {
    name: 1,
    price: 1
})

db.products.find({
    color: {
        $nin: ["black", "white"]
    }
}, {
    name: 1,
    color: 1
})

AND
The $and is a logical query operator that allows you to carry a logical AND operation on an array of one or more expressions.

db.products.find({
    $and: [{
        price: 899
    }, {
        color: {
            $in: ["white", "black"]
        }
    }]
}, {
    name: 1,
    price: 1,
    color: 1
})


OR
The $or is a logical query operator that carries a logical OR operation on an array of one or more expressions and selects
 the documents that satisfy at least one expression.

db.products.find({
    $or: [{
        price: 799
    }, {
        price: 899
    }]
}, {
    name: 1,
    price: 1
})


The updateOne() method allows you to update a single document that satisfies a condition.
db.products.updateOne({
    _id: 1
}, {
    $set: {
        price: 899
    }
})

db.products.updateOne({
    _id: 4
}, {
    $set: {
        "spec.ram": 16,
        "spec.screen": 10.7,
        "spec.cpu": 2.66
    }
})

The updateMany() method allows you to update all documents that satisfy a condition.
db.products.updateMany(
    {  price: 899}, 
    { $set: {  price: 895 }}
)
db.products.find({
    price: 895
}, {
    name: 1,
    price: 1
})

db.products.find({
    price: { $gt: 700}
}, {
    name: 1,
    price: 1,
    spec: 1
})


db.products.updateMany({
    price: { $gt: 700}
}, {
    $set: {
        "spec.ram": 32,
        "spec.screen": 9.8,
        "spec.cpu": 5.66
    }
})

db.products.updateMany({
    _id: {
        $in: [1, 2, 3]
    }
}, {
    $set: {
        "storage.0": 16,
        "storage.1": 32
    }
})

The deleteOne() method allows you to delete a single document from a collection.

db.products.deleteOne({ _id: 1 })

The following query uses the deleteOne() method to remove the first document returned from the products collection:
db.products.deleteOne({})


The deleteMany() method allows you to remove all documents that match a condition from a collection.

db.products.deleteMany({ price: 899 })

The following query uses the deleteMany() method to delete all documents from the products collection:
db.products.deleteMany({})



